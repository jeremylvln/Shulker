name: ci

on:
  pull_request:
  push:
    branches:
      - main

env:
  TARGET_NODE_VERSION: '20'
  TARGET_RUST_VERSION: 'stable'
  TARGET_JAVA_VERSION: '17'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.TARGET_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.TARGET_NODE_VERSION }}
          cache: npm

      - name: Use Rust ${{ env.TARGET_RUST_VERSION }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.TARGET_RUST_VERSION }}
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Use Java ${{ env.TARGET_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: ${{ env.TARGET_JAVA_VERSION }}
          cache: 'gradle'

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Restore Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            dist/rust/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v3

      - name: Run build
        run: npx nx affected --target=build --parallel=1

  test:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.TARGET_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.TARGET_NODE_VERSION }}
          cache: npm

      - name: Use Rust ${{ env.TARGET_RUST_VERSION }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.TARGET_RUST_VERSION }}
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Use Java ${{ env.TARGET_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: ${{ env.TARGET_JAVA_VERSION }}
          cache: 'gradle'

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Restore Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            dist/rust/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust tools
        run: cargo binstall -y cargo-tarpaulin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v3

      - name: Run tests
        run: npx nx affected --target=test --parallel=1

      - name: Upload coverage reports to Codecov
        run: |
          curl -o codecov https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          CODECOV=$(pwd)/codecov bash scripts/upload_codecov_files.sh
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.TARGET_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.TARGET_NODE_VERSION }}
          cache: npm

      - name: Use Rust ${{ env.TARGET_RUST_VERSION }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.TARGET_RUST_VERSION }}
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Use Java ${{ env.TARGET_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: ${{ env.TARGET_JAVA_VERSION }}
          cache: 'gradle'

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Restore Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            dist/rust/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v3

      - name: Run lint
        run: npx nx affected --target=lint --parallel=1

  quality:
    runs-on: ubuntu-latest

    needs:
      - test

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.TARGET_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.TARGET_NODE_VERSION }}
          cache: npm

      - name: Use Rust ${{ env.TARGET_RUST_VERSION }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.TARGET_RUST_VERSION }}
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Use Java ${{ env.TARGET_JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: ${{ env.TARGET_JAVA_VERSION }}
          cache: 'gradle'

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Restore Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            dist/rust/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust tools
        run: cargo binstall -y clippy-sarif sarif-fmt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run clippy
        run: cargo clippy --all-features --message-format=json -- --deny warnings | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Run detekt
        run: ./gradlew detekt
        continue-on-error: true

      - name: Upload Clippy analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

      - name: Upload Detekt analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: build/reports/detekt/merge.sarif
          wait-for-processing: true

  semantic:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Ensure semantic
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
