name: ci

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  build:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v4

      - name: Run build
        run: pnpm exec nx affected --target=build --parallel=1

      - name: Print sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Install Rust tools
        run: cargo binstall -y cargo-tarpaulin
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v4

      - name: Run tests
        run: pnpm exec nx affected --target=test --parallel=1

      - name: Upload coverage reports to Codecov
        run: |
          curl -o codecov https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          CODECOV=$(pwd)/codecov bash scripts/upload_codecov_files.sh
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Print sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats

  quality:
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Install Rust tools
        run: cargo binstall -y cargo-deny clippy-sarif sarif-fmt
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run cargo-deny
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: cargo deny check

      - name: Run clippy
        run: cargo clippy --all-features --message-format=json -- --deny warnings | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt

      - name: Run detekt
        run: ./gradlew detektAll

      - name: Upload Clippy analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

      - name: Upload Detekt analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: build/reports/detekt/merge.sarif
          wait-for-processing: true

  lint:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Prepare Git boundaries for affected projects
        uses: nrwl/nx-set-shas@v4

      - name: Run lint
        run: pnpm exec nx affected --target=lint --parallel=1

  semantic:
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'

    steps:
      - name: Ensure semantic
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ github.token }}
