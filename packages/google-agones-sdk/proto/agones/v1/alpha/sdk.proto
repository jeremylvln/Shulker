// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package agones.dev.sdk.alpha;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

// SDK service to be used in the GameServer SDK to the Pod Sidecar.
service SDK {
  // PlayerConnect increases the SDK’s stored player count by one, and appends this playerID to GameServer.Status.Players.IDs.
  //
  // GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
  // unless there is already an update pending, in which case the update joins that batch operation.
  //
  // PlayerConnect returns true and adds the playerID to the list of playerIDs if this playerID was not already in the
  // list of connected playerIDs.
  //
  // If the playerID exists within the list of connected playerIDs, PlayerConnect will return false, and the list of
  // connected playerIDs will be left unchanged.
  //
  // An error will be returned if the playerID was not already in the list of connected playerIDs but the player capacity for
  // the server has been reached. The playerID will not be added to the list of playerIDs.
  //
  // Warning: Do not use this method if you are manually managing GameServer.Status.Players.IDs and GameServer.Status.Players.Count
  // through the Kubernetes API, as indeterminate results will occur.
  rpc PlayerConnect (PlayerID) returns (Bool);

  // Decreases the SDK’s stored player count by one, and removes the playerID from GameServer.Status.Players.IDs.
  //
  // GameServer.Status.Players.Count and GameServer.Status.Players.IDs are then set to update the player count and id list a second from now,
  // unless there is already an update pending, in which case the update joins that batch operation.
  //
  // PlayerDisconnect will return true and remove the supplied playerID from the list of connected playerIDs if the
  // playerID value exists within the list.
  //
  // If the playerID was not in the list of connected playerIDs, the call will return false, and the connected playerID list
  // will be left unchanged.
  //
  // Warning: Do not use this method if you are manually managing GameServer.status.players.IDs and GameServer.status.players.Count
  // through the Kubernetes API, as indeterminate results will occur.
  rpc PlayerDisconnect (PlayerID) returns (Bool);

  // Update the GameServer.Status.Players.Capacity value with a new capacity.
  rpc SetPlayerCapacity (Count) returns (Empty);

  // Retrieves the current player capacity. This is always accurate from what has been set through this SDK,
  // even if the value has yet to be updated on the GameServer status resource.
  //
  // If GameServer.Status.Players.Capacity is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
  rpc GetPlayerCapacity (Empty) returns (Count);

  // Retrieves the current player count. This is always accurate from what has been set through this SDK,
  // even if the value has yet to be updated on the GameServer status resource.
  //
  // If GameServer.Status.Players.Count is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
  rpc GetPlayerCount (Empty) returns (Count);

  // Returns if the playerID is currently connected to the GameServer. This is always accurate from what has been set through this SDK,
  // even if the value has yet to be updated on the GameServer status resource.
  //
  // If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to determine connected status.
  rpc IsPlayerConnected (PlayerID) returns (Bool);

  // Returns the list of the currently connected player ids. This is always accurate from what has been set through this SDK,
  // even if the value has yet to be updated on the GameServer status resource.
  //
  // If GameServer.Status.Players.IDs is set manually through the Kubernetes API, use SDK.GameServer() or SDK.WatchGameServer() instead to view this value.
  rpc GetConnectedPlayers(Empty) returns (PlayerIDList);

  // Gets a Counter. Returns NOT_FOUND if the Counter does not exist.
  rpc GetCounter(GetCounterRequest) returns (Counter);

  // UpdateCounter returns the updated Counter. Returns NOT_FOUND if the Counter does not exist (name cannot be updated).
  // Returns OUT_OF_RANGE if the Count is out of range [0,Capacity].
  // Returns INVALID_ARGUMENT if the field mask path(s) are not field(s) of the Counter.
  // If a field mask path(s) is specified, but the value is not set in the request Counter object,
  // then the default value for the variable will be set (i.e. 0 for "capacity" or "count").
  rpc UpdateCounter(UpdateCounterRequest) returns (Counter);

  // Gets a List. Returns NOT_FOUND if the List does not exist.
  rpc GetList(GetListRequest) returns (List);

  // UpdateList returns the updated List. Returns NOT_FOUND if the List does not exist (name cannot be updated).
  // **THIS WILL OVERWRITE ALL EXISTING LIST.VALUES WITH ANY REQUEST LIST.VALUES**
  // Use AddListValue() or RemoveListValue() for modifying the List.Values field.
  // Returns INVALID_ARGUMENT if the field mask path(s) are not field(s) of the List.
  // If a field mask path(s) is specified, but the value is not set in the request List object,
  // then the default value for the variable will be set (i.e. 0 for "capacity", empty list for "values").
  rpc UpdateList(UpdateListRequest) returns (List);

  // Adds a value to a List and returns updated List. Returns NOT_FOUND if the List does not exist.
  // Returns ALREADY_EXISTS if the value is already in the List.
  // Returns OUT_OF_RANGE if the List is already at Capacity.
  rpc AddListValue(AddListValueRequest) returns (List);

  // Removes a value from a List and returns updated List. Returns NOT_FOUND if the List does not exist.
  // Returns NOT_FOUND if the value is not in the List.
  rpc RemoveListValue(RemoveListValueRequest) returns (List);
}

// I am Empty
message Empty {
}

// Store a count variable.
message Count {
  int64 count = 1;
}

// Store a boolean result
message Bool {
  bool bool = 1;
}

// The unique identifier for a given player.
message PlayerID {
  string playerID = 1;
}

// List of Player IDs
message PlayerIDList {
  repeated string list = 1;
}

// A representation of a Counter.
message Counter {
  // The name of the Counter
  string name = 1;
  // The current count of the Counter
  int64 count = 2;
  // The maximum capacity of the Counter
  int64 capacity = 3;
}

message GetCounterRequest {
  // The name of the Counter to get
  string name = 1;
}

message UpdateCounterRequest {
  // The Counter to update
  Counter counter = 1;

  // Required. Mask (list) of fields to update.
  // Fields are specified relative to the Counter
  // (e.g. `count`, `capacity`; *not* `Counter.count` or `Counter.capacity`).
  google.protobuf.FieldMask update_mask = 2;
}

// A representation of a List.
message List {
  // The name of the List
  string name = 1;
  // The maximum capacity of the List
  int64 capacity = 2;
  // The array of items in the List ["v1", "v2", …]
  repeated string values = 3;
}

message GetListRequest {
  // The name of the List to get
  string name = 1;
}

message UpdateListRequest {
  // The List to update
  List list = 1;

  // Required. Mask (list) of fields to update.
  // Fields are specified relative to the List
  // (e.g. `capacity`, `values`; *not* `List.capacity` or `List.values`).
  google.protobuf.FieldMask update_mask = 2;
}

message AddListValueRequest {
  // The name of the List to add a value to.
  string name = 1;

  string value = 2;
}

message RemoveListValueRequest {
  // The name of the List to remove a value from.
  string name = 1;

  string value = 2;
}
