import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.7.22" apply false
    id "org.jetbrains.kotlin.kapt" version "1.8.0" apply false
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

allprojects {
    version = '0.0.1'

    repositories {
        mavenCentral()
    }
}

configure(subprojects.findAll {
    !['packages'].contains(it.name)
}) {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'io.shulkermc'

    it.buildDir = "$rootDir/dist/packages/$it.name"

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = 'UTF-8'

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
    }

    compileKotlin {
        kotlinOptions.allWarningsAsErrors = true
    }

    assemble.dependsOn(shadowJar)

    shadowJar {
        archiveClassifier.set("")
    }

    if (!it.hasProperty('noPublishing')) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = project.name
                    from components.java

                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }

                    pom {
                        name = project.name
                        // description = 'A concise description of my library'
                        url = "https://github.com/IamBlueSlime/shulker"

                        /*licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }*/

                        developers {
                            developer {
                                id = 'iamblueslime'
                                name = 'Jérémy Levilain'
                                email = 'jeremy@jeremylvln.fr'
                            }
                        }

                        scm {
                            connection = 'scm:git:git://github.com/IamBlueSlime/shulker.git'
                            developerConnection = 'scm:git:ssh://github.com/IamBlueSlime/shulker.git'
                            url = "https://github.com/IamBlueSlime/shulker"
                        }
                    }
                }
            }

            repositories {
                maven {
                    name = "Shulker"
                    url = "https://maven.jeremylvln.fr/artifactory/shulker"
                    credentials {
                        username = project.findProperty("artifactory.username") ?: System.getenv("ARTIFACTORY_USERNAME")
                        password = project.findProperty("artifactory.password") ?: System.getenv("ARTIFACTORY_PASSWORD")
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.mavenJava
        }
    }

    if (it.hasProperty('isProxyPlugin')) {
        apply plugin: 'org.jetbrains.kotlin.kapt'

        sourceSets {
            common

            bungeecord {
                compileClasspath += common.output
                runtimeClasspath += common.output
            }

            velocity {
                compileClasspath += common.output
                runtimeClasspath += common.output
            }
        }

        configurations {
            bungeecordCompileOnly.extendsFrom(commonCompileOnly)
            bungeecordRuntimeOnly.extendsFrom(commonRuntimeOnly)
            bungeecordImplementation.extendsFrom(commonImplementation)
            velocityCompileOnly.extendsFrom(commonCompileOnly)
            velocityRuntimeOnly.extendsFrom(commonRuntimeOnly)
            velocityImplementation.extendsFrom(commonImplementation)
        }

        repositories {
            maven {
                name = 'md5'
                url 'https://oss.sonatype.org/content/repositories/snapshots'
            }

            maven {
                name = 'papermc'
                url = 'https://repo.papermc.io/repository/maven-public/'
            }
        }

        dependencies {
            commonCompileOnly 'net.kyori:adventure-api:4.12.0'
            bungeecordCompileOnly 'net.md-5:bungeecord-api:1.19-R0.1-SNAPSHOT'
            bungeecordImplementation "net.kyori:adventure-platform-bungeecord:4.1.2"
            velocityCompileOnly 'com.velocitypowered:velocity-api:3.1.1'
            kaptVelocity 'com.velocitypowered:velocity-api:3.1.1'
        }

        task bungeecordJar(type: ShadowJar) {
            archiveClassifier.set("bungeecord")
            from sourceSets.common.output
            from sourceSets.bungeecord.output
            configurations = [project.configurations.bungeecordRuntimeClasspath]
        }

        task velocityJar(type: ShadowJar) {
            archiveClassifier.set("velocity")
            from sourceSets.common.output
            from sourceSets.velocity.output
            configurations = [project.configurations.velocityRuntimeClasspath]
        }

        artifacts {
            bungeecordJar
            velocityJar
        }

        assemble.dependsOn(bungeecordJar, velocityJar)

        if (!it.hasProperty('noPublishing')) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        artifact bungeecordJar
                        artifact velocityJar
                    }
                }
            }
        }
    }
}
